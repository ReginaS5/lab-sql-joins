USE sakila;

-- Challenge - Joining on multiple tables
-- Write SQL queries to perform the following tasks using the Sakila database:
-- 1 List the number of films per category.
SELECT 
    category.name AS category_name,
    COUNT(film_category.film_id) AS film_count
FROM
    category
        JOIN
    film_category ON category.category_id = film_category.category_id
GROUP BY category_name;

-- 2 Retrieve the store ID, city, and country for each store.
SELECT 
    store.store_id,
    city.city,
    country.country
FROM 
    store
JOIN 
    address ON store.address_id = address.address_id
JOIN 
    city ON address.city_id = city.city_id
JOIN 
    country ON city.country_id = country.country_id;

-- 3 Calculate the total revenue generated by each store in dollars.
SELECT 
    s.store_id,
    CONCAT(city, ', ', country) AS location,
    SUM(p.amount) AS total_revenue
FROM 
    store s
JOIN 
    address a ON s.address_id = a.address_id
JOIN 
    city c ON a.city_id = c.city_id
JOIN 
    country co ON c.country_id = co.country_id
JOIN 
    customer cu ON s.store_id = cu.store_id
JOIN 
    payment p ON cu.customer_id = p.customer_id
GROUP BY 
    s.store_id, location;
    
-- 4 Determine the average running time of films for each category.
SELECT 
    c.name AS category_name,
    AVG(f.length) AS average_running_time
FROM 
    category c
JOIN 
    film_category fc ON c.category_id = fc.category_id
JOIN 
    film f ON fc.film_id = f.film_id
GROUP BY 
    c.name;
    
-- BONUS... I HOPE.alter
-- 5 Identify the film categories with the longest average running time.
SELECT 
    c.name AS category_name,
    AVG(f.length) AS longest_AVG
FROM 
    category c
JOIN 
    film_category fc ON c.category_id = fc.category_id
JOIN 
    film f ON fc.film_id = f.film_id
GROUP BY 
    c.name
ORDER BY 
    longest_AVG DESC
LIMIT 3;

-- 6 Display the top 10 most frequently rented movies in descending order
SELECT 
    f.title AS movie_title,
    COUNT(r.rental_id) AS rental_count
FROM 
    film f
JOIN 
    inventory i ON f.film_id = i.film_id
JOIN 
    rental r ON i.inventory_id = r.inventory_id
GROUP BY 
    f.title
ORDER BY 
    rental_count DESC
LIMIT 10;

-- 7 Determine if "Academy Dinosaur" can be rented from Store 1. 
SELECT 
    film.title AS movie_title,
    inventory.inventory_id,
    store.store_id,
    rental.rental_id
FROM 
    film
JOIN 
    inventory ON film.film_id = inventory.film_id
JOIN 
    store ON inventory.store_id = store.store_id
LEFT JOIN 
    rental ON inventory.inventory_id = rental.inventory_id
WHERE 
    film.title = 'Academy Dinosaur'
    AND store.store_id = 1;
    
-- 8 rovide a list of all distinct film titles, along with their availability status in the inventory. 
-- Include a column indicating whether each title is 'Available' or 'NOT available.' 
-- Note that there are 42 titles that are not in the inventory, and this information can be obtained using a 
-- CASE statement combined with IFNULL."
SELECT 
    film.title AS movie_title,
    IFNULL(
        CASE 
            WHEN COUNT(inventory.inventory_id) > 0 THEN 'Available'
            ELSE 'NOT available'
        END,
        'NOT available'
    ) AS availability_status
FROM 
    film
LEFT JOIN 
    inventory ON film.film_id = inventory.film_id
GROUP BY 
    film.title;
